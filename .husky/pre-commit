#!/bin/sh

echo "üé£ CloudBlitz Pre-commit Hooks Starting..."

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Get list of staged files
STAGED_CLIENT_FILES=$(git diff --cached --name-only --diff-filter=ACM | grep "^Client/" || true)
STAGED_SERVER_FILES=$(git diff --cached --name-only --diff-filter=ACM | grep "^Server/" || true)
STAGED_ROOT_FILES=$(git diff --cached --name-only --diff-filter=ACM | grep -E "^(package\.json|docker-compose|Dockerfile|\.env)" || true)

# Function to check if branch is protected
check_protected_branch() {
  BRANCH=$(git rev-parse --abbrev-ref HEAD)
  if [ "$BRANCH" = "main" ] || [ "$BRANCH" = "master" ] || [ "$BRANCH" = "develop" ]; then
    echo "${RED}‚ùå Direct commits to protected branch '$BRANCH' are not allowed!${NC}"
    echo "${YELLOW}Please create a feature branch: git checkout -b feature/your-feature-name${NC}"
    exit 1
  fi
}

# Function to check commit message format (if this is not an amend)
check_commit_message() {
  if [ ! -f .git/COMMIT_EDITMSG ]; then
    return 0
  fi
  
  # Read the commit message
  COMMIT_MSG=$(head -n1 .git/COMMIT_EDITMSG)
  
  # Check if it follows conventional commits format
  if ! echo "$COMMIT_MSG" | grep -qE "^(feat|fix|docs|style|refactor|test|chore|perf|ci|build)(\(.+\))?: .{1,50}"; then
    echo "${RED}‚ùå Commit message does not follow conventional commits format!${NC}"
    echo "${YELLOW}Format: type(scope): description${NC}"
    echo "${YELLOW}Types: feat, fix, docs, style, refactor, test, chore, perf, ci, build${NC}"
    echo "${YELLOW}Example: feat(auth): add user login functionality${NC}"
    exit 1
  fi
}

# Production-grade checks
echo "${BLUE}üîç Running production-grade pre-commit checks...${NC}"

# Check protected branches
check_protected_branch

# Check for secrets and sensitive data (basic patterns)
echo "${BLUE}üîê Checking for secrets and sensitive data...${NC}"
if git diff --cached -p | grep -E "password\s*[=:]\s*['\"].+['\"]|secret\s*[=:]\s*['\"].+['\"]|api_key\s*[=:]\s*['\"].+['\"]" > /dev/null 2>&1; then
  echo "${RED}‚ùå Potential secrets detected in code changes! Please review.${NC}"
  echo "${YELLOW}If this is intentional, consider using environment variables.${NC}"
  exit 1
fi

# Check for large files
echo "${BLUE}üì¶ Checking for large files...${NC}"
for file in $(git diff --cached --name-only); do
  if [ -f "$file" ]; then
    size=$(wc -c < "$file" 2>/dev/null || echo 0)
    if [ $size -gt 1048576 ]; then  # 1MB
      echo "${RED}‚ùå Large file detected: $file ($(($size/1024))KB)${NC}"
      echo "${YELLOW}Consider using Git LFS for large files.${NC}"
      exit 1
    fi
  fi
done

# Run Client checks
if [ -n "$STAGED_CLIENT_FILES" ]; then
  echo "${GREEN}üîç Running Client-side checks...${NC}"
  cd Client
  
  # Run lint-staged with comprehensive checks
  if ! npx lint-staged; then
    echo "${RED}‚ùå Client lint-staged checks failed${NC}"
    exit 1
  fi
  
  # Additional Client checks
  echo "${BLUE}üèóÔ∏è Building Client to verify no build errors...${NC}"
  if ! npm run build > /dev/null 2>&1; then
    echo "${RED}‚ùå Client build failed! Fix build errors before committing.${NC}"
    exit 1
  fi
  
  cd ..
  echo "${GREEN}‚úÖ Client checks passed!${NC}"
fi

# Run Server checks
if [ -n "$STAGED_SERVER_FILES" ]; then
  echo "${GREEN}üîç Running Server-side checks...${NC}"
  cd Server
  
  # Run lint-staged with comprehensive checks  
  if ! npx lint-staged; then
    echo "${RED}‚ùå Server lint-staged checks failed${NC}"
    exit 1
  fi
  
  # Additional Server checks
  echo "${BLUE}üèóÔ∏è Building Server to verify no build errors...${NC}"
  if ! npm run build > /dev/null 2>&1; then
    echo "${RED}‚ùå Server build failed! Fix build errors before committing.${NC}"
    exit 1
  fi
  
  cd ..
  echo "${GREEN}‚úÖ Server checks passed!${NC}"
fi

# Check root configuration files
if [ -n "$STAGED_ROOT_FILES" ]; then
  echo "${BLUE}üìã Validating root configuration files...${NC}"
  
  # Validate docker-compose files
  for file in $(echo "$STAGED_ROOT_FILES" | grep "docker-compose"); do
    if [ -f "$file" ]; then
      if ! docker-compose -f "$file" config > /dev/null 2>&1; then
        echo "${RED}‚ùå Invalid docker-compose file: $file${NC}"
        exit 1
      fi
    fi
  done
  
  echo "${GREEN}‚úÖ Root configuration files validated!${NC}"
fi

# Final success message
echo "${GREEN}üéâ All pre-commit checks passed! Commit proceeding...${NC}"
echo "${BLUE}üìä Summary:${NC}"
[ -n "$STAGED_CLIENT_FILES" ] && echo "  ‚Ä¢ Client files: $(echo "$STAGED_CLIENT_FILES" | wc -l) files checked"
[ -n "$STAGED_SERVER_FILES" ] && echo "  ‚Ä¢ Server files: $(echo "$STAGED_SERVER_FILES" | wc -l) files checked"
[ -n "$STAGED_ROOT_FILES" ] && echo "  ‚Ä¢ Root config files: $(echo "$STAGED_ROOT_FILES" | wc -l) files checked"

exit 0
