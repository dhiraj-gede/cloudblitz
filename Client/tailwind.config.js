/** @type {import('tailwindcss').Config} */
export default {
  content: ['./index.html', './src/**/*.{html,js,jsx,ts,tsx}', './src/*.{html,js,jsx,ts,tsx}'],
  darkMode: 'class',
  theme: {
    extend: {
      colors: {
        // Base semantic colors
        border: 'hsl(var(--border) / <alpha-value>)',
        input: 'hsl(var(--input) / <alpha-value>)',
        ring: 'hsl(var(--ring) / <alpha-value>)',
        background: 'hsl(var(--background) / <alpha-value>)',
        foreground: 'hsl(var(--foreground) / <alpha-value>)',

        primary: {
          DEFAULT: 'hsl(var(--primary) / <alpha-value>)',
          foreground: 'hsl(var(--primary-foreground) / <alpha-value>)',
        },
        secondary: {
          DEFAULT: 'hsl(var(--secondary) / <alpha-value>)',
          foreground: 'hsl(var(--secondary-foreground) / <alpha-value>)',
        },
        destructive: {
          DEFAULT: 'hsl(var(--destructive) / <alpha-value>)',
          foreground: 'hsl(var(--destructive-foreground) / <alpha-value>)',
        },
        muted: {
          DEFAULT: 'hsl(var(--muted) / <alpha-value>)',
          foreground: 'hsl(var(--muted-foreground) / <alpha-value>)',
        },
        accent: {
          DEFAULT: 'hsl(var(--accent) / <alpha-value>)',
          foreground: 'hsl(var(--accent-foreground) / <alpha-value>)',
        },
        popover: {
          DEFAULT: 'hsl(var(--popover) / <alpha-value>)',
          foreground: 'hsl(var(--popover-foreground) / <alpha-value>)',
        },
        card: {
          DEFAULT: 'hsl(var(--card) / <alpha-value>)',
          foreground: 'hsl(var(--card-foreground) / <alpha-value>)',
        },

        // Extended color palette
        gray: {
          50: 'hsl(var(--gray-50) / <alpha-value>)',
          100: 'hsl(var(--gray-100) / <alpha-value>)',
          200: 'hsl(var(--gray-200) / <alpha-value>)',
          300: 'hsl(var(--gray-300) / <alpha-value>)',
          400: 'hsl(var(--gray-400) / <alpha-value>)',
          500: 'hsl(var(--gray-500) / <alpha-value>)',
          600: 'hsl(var(--gray-600) / <alpha-value>)',
          700: 'hsl(var(--gray-700) / <alpha-value>)',
          800: 'hsl(var(--gray-800) / <alpha-value>)',
          900: 'hsl(var(--gray-900) / <alpha-value>)',
        },
        blue: {
          50: 'hsl(var(--blue-50) / <alpha-value>)',
          100: 'hsl(var(--blue-100) / <alpha-value>)',
          200: 'hsl(var(--blue-200) / <alpha-value>)',
          300: 'hsl(var(--blue-300) / <alpha-value>)',
          400: 'hsl(var(--blue-400) / <alpha-value>)',
          500: 'hsl(var(--blue-500) / <alpha-value>)',
          600: 'hsl(var(--blue-600) / <alpha-value>)',
          700: 'hsl(var(--blue-700) / <alpha-value>)',
          800: 'hsl(var(--blue-800) / <alpha-value>)',
          900: 'hsl(var(--blue-900) / <alpha-value>)',
        },
        purple: {
          50: 'hsl(var(--purple-50) / <alpha-value>)',
          100: 'hsl(var(--purple-100) / <alpha-value>)',
          200: 'hsl(var(--purple-200) / <alpha-value>)',
          300: 'hsl(var(--purple-300) / <alpha-value>)',
          400: 'hsl(var(--purple-400) / <alpha-value>)',
          500: 'hsl(var(--purple-500) / <alpha-value>)',
          600: 'hsl(var(--purple-600) / <alpha-value>)',
          700: 'hsl(var(--purple-700) / <alpha-value>)',
          800: 'hsl(var(--purple-800) / <alpha-value>)',
          900: 'hsl(var(--purple-900) / <alpha-value>)',
        },
        green: {
          50: 'hsl(var(--green-50) / <alpha-value>)',
          100: 'hsl(var(--green-100) / <alpha-value>)',
          200: 'hsl(var(--green-200) / <alpha-value>)',
          300: 'hsl(var(--green-300) / <alpha-value>)',
          400: 'hsl(var(--green-400) / <alpha-value>)',
          500: 'hsl(var(--green-500) / <alpha-value>)',
          600: 'hsl(var(--green-600) / <alpha-value>)',
          700: 'hsl(var(--green-700) / <alpha-value>)',
          800: 'hsl(var(--green-800) / <alpha-value>)',
          900: 'hsl(var(--green-900) / <alpha-value>)',
        },
        amber: {
          50: 'hsl(var(--amber-50) / <alpha-value>)',
          100: 'hsl(var(--amber-100) / <alpha-value>)',
          200: 'hsl(var(--amber-200) / <alpha-value>)',
          300: 'hsl(var(--amber-300) / <alpha-value>)',
          400: 'hsl(var(--amber-400) / <alpha-value>)',
          500: 'hsl(var(--amber-500) / <alpha-value>)',
          600: 'hsl(var(--amber-600) / <alpha-value>)',
          700: 'hsl(var(--amber-700) / <alpha-value>)',
          800: 'hsl(var(--amber-800) / <alpha-value>)',
          900: 'hsl(var(--amber-900) / <alpha-value>)',
        },
        red: {
          50: 'hsl(var(--red-50) / <alpha-value>)',
          100: 'hsl(var(--red-100) / <alpha-value>)',
          200: 'hsl(var(--red-200) / <alpha-value>)',
          300: 'hsl(var(--red-300) / <alpha-value>)',
          400: 'hsl(var(--red-400) / <alpha-value>)',
          500: 'hsl(var(--red-500) / <alpha-value>)',
          600: 'hsl(var(--red-600) / <alpha-value>)',
          700: 'hsl(var(--red-700) / <alpha-value>)',
          800: 'hsl(var(--red-800) / <alpha-value>)',
          900: 'hsl(var(--red-900) / <alpha-value>)',
        },
        cyan: {
          50: 'hsl(var(--cyan-50) / <alpha-value>)',
          100: 'hsl(var(--cyan-100) / <alpha-value>)',
          200: 'hsl(var(--cyan-200) / <alpha-value>)',
          300: 'hsl(var(--cyan-300) / <alpha-value>)',
          400: 'hsl(var(--cyan-400) / <alpha-value>)',
          500: 'hsl(var(--cyan-500) / <alpha-value>)',
          600: 'hsl(var(--cyan-600) / <alpha-value>)',
          700: 'hsl(var(--cyan-700) / <alpha-value>)',
          800: 'hsl(var(--cyan-800) / <alpha-value>)',
          900: 'hsl(var(--cyan-900) / <alpha-value>)',
        },
        pink: {
          50: 'hsl(var(--pink-50) / <alpha-value>)',
          100: 'hsl(var(--pink-100) / <alpha-value>)',
          200: 'hsl(var(--pink-200) / <alpha-value>)',
          300: 'hsl(var(--pink-300) / <alpha-value>)',
          400: 'hsl(var(--pink-400) / <alpha-value>)',
          500: 'hsl(var(--pink-500) / <alpha-value>)',
          600: 'hsl(var(--pink-600) / <alpha-value>)',
          700: 'hsl(var(--pink-700) / <alpha-value>)',
          800: 'hsl(var(--pink-800) / <alpha-value>)',
          900: 'hsl(var(--pink-900) / <alpha-value>)',
        },
        teal: {
          50: 'hsl(var(--teal-50) / <alpha-value>)',
          100: 'hsl(var(--teal-100) / <alpha-value>)',
          200: 'hsl(var(--teal-200) / <alpha-value>)',
          300: 'hsl(var(--teal-300) / <alpha-value>)',
          400: 'hsl(var(--teal-400) / <alpha-value>)',
          500: 'hsl(var(--teal-500) / <alpha-value>)',
          600: 'hsl(var(--teal-600) / <alpha-value>)',
          700: 'hsl(var(--teal-700) / <alpha-value>)',
          800: 'hsl(var(--teal-800) / <alpha-value>)',
          900: 'hsl(var(--teal-900) / <alpha-value>)',
        },
        indigo: {
          50: 'hsl(var(--indigo-50) / <alpha-value>)',
          100: 'hsl(var(--indigo-100) / <alpha-value>)',
          200: 'hsl(var(--indigo-200) / <alpha-value>)',
          300: 'hsl(var(--indigo-300) / <alpha-value>)',
          400: 'hsl(var(--indigo-400) / <alpha-value>)',
          500: 'hsl(var(--indigo-500) / <alpha-value>)',
          600: 'hsl(var(--indigo-600) / <alpha-value>)',
          700: 'hsl(var(--indigo-700) / <alpha-value>)',
          800: 'hsl(var(--indigo-800) / <alpha-value>)',
          900: 'hsl(var(--indigo-900) / <alpha-value>)',
        },

        // Functional colors
        success: {
          DEFAULT: 'hsl(var(--success) / <alpha-value>)',
          light: 'hsl(var(--success-light) / <alpha-value>)',
          dark: 'hsl(var(--success-dark) / <alpha-value>)',
          bg: 'hsl(var(--success-bg) / <alpha-value>)',
          fg: 'hsl(var(--success-fg) / <alpha-value>)',
        },
        warning: {
          DEFAULT: 'hsl(var(--warning) / <alpha-value>)',
          light: 'hsl(var(--warning-light) / <alpha-value>)',
          dark: 'hsl(var(--warning-dark) / <alpha-value>)',
          bg: 'hsl(var(--warning-bg) / <alpha-value>)',
          fg: 'hsl(var(--warning-fg) / <alpha-value>)',
        },
        error: {
          DEFAULT: 'hsl(var(--error) / <alpha-value>)',
          light: 'hsl(var(--error-light) / <alpha-value>)',
          dark: 'hsl(var(--error-dark) / <alpha-value>)',
          bg: 'hsl(var(--error-bg) / <alpha-value>)',
          fg: 'hsl(var(--error-fg) / <alpha-value>)',
        },
        info: {
          DEFAULT: 'hsl(var(--info) / <alpha-value>)',
          light: 'hsl(var(--info-light) / <alpha-value>)',
          dark: 'hsl(var(--info-dark) / <alpha-value>)',
          bg: 'hsl(var(--info-bg) / <alpha-value>)',
          fg: 'hsl(var(--info-fg) / <alpha-value>)',
        },

        // Status colors
        online: 'hsl(var(--online) / <alpha-value>)',
        offline: 'hsl(var(--offline) / <alpha-value>)',
        away: 'hsl(var(--away) / <alpha-value>)',
        busy: 'hsl(var(--busy) / <alpha-value>)',
        focus: 'hsl(var(--focus) / <alpha-value>)',
        idle: 'hsl(var(--idle) / <alpha-value>)',
      },
      borderRadius: {
        lg: 'var(--radius)',
        md: 'calc(var(--radius) - 2px)',
        sm: 'calc(var(--radius) - 4px)',
      },
      backdropBlur: {
        glass: '16px',
      },
      backdropSaturate: {
        glass: '180%',
      },
      boxShadow: {
        sm: 'var(--shadow-sm)',
        DEFAULT: 'var(--shadow)',
        md: 'var(--shadow-md)',
        lg: 'var(--shadow-lg)',
      },
      animation: {
        'fade-in': 'fadeIn 0.5s ease-in-out',
        'slide-up': 'slideUp 0.3s ease-out',
        'slide-down': 'slideDown 0.3s ease-out',
        'bounce-in': 'bounceIn 0.6s ease-out',
      },
      keyframes: {
        fadeIn: {
          '0%': { opacity: '0' },
          '100%': { opacity: '1' },
        },
        slideUp: {
          '0%': { transform: 'translateY(10px)', opacity: '0' },
          '100%': { transform: 'translateY(0)', opacity: '1' },
        },
        slideDown: {
          '0%': { transform: 'translateY(-10px)', opacity: '0' },
          '100%': { transform: 'translateY(0)', opacity: '1' },
        },
        bounceIn: {
          '0%': { transform: 'scale(0.3)', opacity: '0' },
          '50%': { transform: 'scale(1.05)' },
          '70%': { transform: 'scale(0.9)' },
          '100%': { transform: 'scale(1)', opacity: '1' },
        },
      },
      transitionProperty: {
        height: 'height',
        spacing: 'margin, padding',
      },
    },
  },
  plugins: [],
};
